

问题1：在你目前的工作场景中，哪个业务适合使用 rabbitmq？ 引入 rabbitmq 主要解决什么问题?（非相关工作可以以设计淘宝购物和结账功能为例来描述）
回答：
我公司的工作流是一个独立的系统，工单也是一个独立的系统。
2套系统由于没有某些客观或主管的原因，无法通过接口对接。
实现对接可引入rabbitmq作为中介，两个系统都将需要交互信息存放在rabbitmq中，供给对方读取和消费消息。
这样就完成了曲线集成

问题2：如何避免消息重复投递或重复消费？
回答：
避免重复投递：创建新消息前对数据进行查询，若已经变更在生成消息
重复消费：在消息体中存放现有值和期望值，当消费的时候进行预判断，若期望值匹配则不处理

问题3：交换机 fanout、direct、topic 有什么区别？
回答：
 fanout:无路由交换机，不需要routingkey绑定，和路由没有关系，它是直接绑定到队列的。将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout交换机转发消息是最快的。

 direct:直接连接交换机，将生产者的消息通过routing_key直接转发消息队列，不能一对多。将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “test”，则只有被标记为“test”的消息才被转发，不会转发test.aaa，也不会转发dog.123，只会转发test。
 topic:主题路由匹配交换机，队列需要绑定要一个模式上。符号“#”匹配一个或多个词，符号“*”匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.*” 只会匹配到“audit.irs”。

问题4：架构中引入消息队列是否利大于弊？你认为消息队列有哪些缺点？
回答：
消息队列作用是削峰填谷，可以缓解系统高并发请求和发送的需求，但不可避免的会产生消息重复读取和重复生成的问题。

如下情况不建议引入消息队列
1、系统实时性要求高的场景
2、并发少的系统